---
// filepath: /c:/Users/PC GAMING/Documents/estudios y trabajo/portfolio/src/components/KeyboardManager.astro
import { Image } from "astro:assets";
import HotKeyPad from "@icon/hotkeypad.svg";
import "hotkeypad/index.css";
import { translations } from "@/i18n/utils/utils";
import ThemeToggle from "@components/ThemeToggle.astro";

const translationsModule = translations as {
  default: {
    basics: any;
    command: any;
  };
};
const { basics = {}, command = {} } = translationsModule.default || {};
const profiles = basics.profiles || [];

const SOCIAL_ICONS = profiles.reduce(
  (icons: Record<string, string>, profile) => {
    icons[profile.network] = `
      <a href="${profile.url}" target="_blank" rel="noopener noreferrer">
        <img src="${profile.icon}" alt="${profile.network} icon" style="margin-right: 8px" width="16" height="16" />
      </a>`;
    return icons;
  },
  {},
);

const profilesInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_ICONS[network];
  const firstLetter = network[0].toUpperCase();
  const hotkey = network === "Leetcode" ? "ctrl+M" : `ctrl+${firstLetter}`;

  return {
    id: network,
    section: "Social",
    title: network,
    url,
    icon,
    hotkey,
  };
});
---

<button id="keyboardManagerButton">
  {(<Image src={HotKeyPad} alt={command.action} />)}
  <div
    id="hotkeypad"
    data-placeholder={command.command}
    data-info={JSON.stringify(profilesInfo)}
  >
  </div>
</button>

<script>
  import HotKeyPad from "hotkeypad";

  const profiles = JSON.parse(
    document.getElementById("hotkeypad").getAttribute("data-info"),
  );
  const command = {
    action: document
      .getElementById("keyboardManagerButton")
      .querySelector("img").alt,
  };

  interface Info {
    id: string;
    section: string;
    title: string;
    url: string;
    icon: string;
    hotkey: string;
    handler?: () => void;
  }

  const hotkeypad = new HotKeyPad();
  const data = profiles.map(({ url, hotkey, icon, id, section, title }) => {
    return {
      id,
      title,
      icon,
      hotkey,
      section,
      handler: () => {
        window.open(url, "_blank");
      },
    };
  });
  hotkeypad.setCommands([
    {
      id: "print",
      title: command.action,
      icon: `<img src="/public/icons/print.svg" alt="Print icon" style="margin-right: 8px" width="16" height="16" />`,
      hotkey: "ctrl+P",
      section: "Actions",
      handler: () => {
        window.print();
      },
    },
    ...data,
  ]);

  const keyboardManagerButton = document.getElementById(
    "keyboardManagerButton",
  );
  keyboardManagerButton.addEventListener("click", () => {
    const event = new KeyboardEvent("keydown", {
      key: "k",
      code: "KeyK",
      ctrlKey: true,
      bubbles: true,
      cancelable: true,
    });
    document.dispatchEvent(event);
  });

  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    if (
      !keyboardManagerButton.contains(target) &&
      !document.getElementById("hotkeypad").contains(target)
    ) {
      hotkeypad.close();
    }
  });

  window.addEventListener("load", () => {
    const pageWidthInmm = 210;
    const pageHeightInmm = 297;

    function adjustFontSize() {
      const content = document.body;
      const contentHeight = content.scrollHeight;
      const contentWidth = content.scrollWidth;

      const scaleHeight = pageHeightInmm / contentHeight;
      const scaleWidth = pageWidthInmm / contentWidth;
      const scale = Math.min(scaleHeight, scaleWidth);

      const baseFontSize = 12; // Base font size in pt
      const minFontSize = 9; // Minimum font size in pt

      const newFontSize = Math.max(baseFontSize * scale, minFontSize);

      document.body.style.fontSize = `${newFontSize}pt`;
    }

    function restoreFontSize() {
      document.body.style.fontSize = "";
    }

    window.addEventListener("beforeprint", adjustFontSize);
    window.addEventListener("afterprint", restoreFontSize);
  });
</script>

<style is:inline>
  /* KeyboardManager */
  #hotkeypad [data-container] {
    transform: translate(-50%, -200%) !important;
  }

  div[data-section="social"] h4,
  div[data-section="actions"] h4 {
    display: flex;
  }
  div[data-section="social"],
  div[data-section="actions"] {
    text-align: left;
  }

  /* Print */
  @media print {
    nav,
    #About,
    #Footer {
      display: none;
    }

    .containerPage,
    section,
    .container {
      margin: 0px;
      padding: 0px;
      width: 100%;
      max-width: 100%;
    }

    .containgrid {
      grid-template-columns: repeat(2, 1fr) !important;
      display: grid !important;
    }

    .noprint {
      display: none;
    }
    .print {
      display: block;
    }

    .info {
      grid-template-columns: 1fr !important;
      text-align: center !important;
    }
    /* A4: 210 x 297 (mm) */
  }
</style>
