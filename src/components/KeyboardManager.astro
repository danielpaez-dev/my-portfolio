---
import "hotkeypad/index.css";
import { translations } from "@/i18n/utils/utils";

const translationsModule = translations as {
  default: {
    basics: any;
  };
};
const { basics = {} } = translationsModule.default || {};
const profiles = basics.profiles || [];

const SOCIAL_ICONS = profiles.reduce(
  (icons: Record<string, string>, profile) => {
    icons[profile.network] = `
      <a href="${profile.url}" target="_blank" rel="noopener noreferrer">
        <img src="${profile.icon}" alt="${profile.network} icon" style="margin-right: 8px" width="16" height="16" />
      </a>`;
    return icons;
  },
  {},
);

const profilesInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_ICONS[network];
  const firstLetter = network[0].toUpperCase();
  const hotkey = network === "Leetcode" ? "ctrl+M" : `ctrl+${firstLetter}`;

  return {
    id: network,
    section: "Social",
    title: network,
    url,
    icon,
    hotkey,
  };
});
---

<button id="keyboardManagerButton">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon icon-tabler icon-tabler-command"
    width="32"
    height="32"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="#777"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <path
      d="M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10"
    ></path>
  </svg>
  <div
    id="hotkeypad"
    data-placeholder="Comamand"
    data-info={JSON.stringify(profilesInfo)}
  >
  </div>
</button>

<script>
  interface Info {
    id: string;
    section: string;
    title: string;
    url: string;
    icon: string;
    hotkey: string;
    handler?: () => void;
  }

  import HotKeyPad from "hotkeypad";
  const hotkeypad = new HotKeyPad();
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]";
  const parsedInfo = JSON.parse(info) as Info[];

  const data = parsedInfo.map(({ url, hotkey, icon, id, section, title }) => {
    return {
      id,
      title,
      icon,
      hotkey,
      section,
      handler: () => {
        window.open(url, "_blank");
      },
    };
  });
  hotkeypad.setCommands([
    {
      id: "print",
      title: "Imprimir",
      icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
</svg>`,
      hotkey: "ctrl+P",
      section: "Actions",
      handler: () => {
        window.print();
      },
    },
    ...data,
  ]);

  const keyboardManagerButton = document.getElementById(
    "keyboardManagerButton",
  );
  keyboardManagerButton.addEventListener("click", () => {
    const event = new KeyboardEvent("keydown", {
      key: "k",
      code: "KeyK",
      ctrlKey: true,
      bubbles: true,
      cancelable: true,
    });
    document.dispatchEvent(event);
  });
</script>
