---
const { data } = Astro.props;

import Button from "@components/Button.astro";
import home from "@icon/home.svg";
import person from "@icon/person.svg";
import briefcase from "@icon/briefcase.svg";
import academic from "@icon/academic.svg";
import skills from "@icon/skills.svg";
import contact from "@icon/contact.svg";
import ThemeToggle from "@components/ThemeToggle.astro";
import KeyboardManager from "@components/KeyboardManager.astro";

const icons = {
  Hero: home,
  About: person,
  Projects: briefcase,
  CoursesAndCertifications: academic,
  Skills: skills,
  Footer: contact,
};

const activeKeys = Object.keys(data).filter(
  (key) => data[key] && key !== "Nav",
);
---

<nav
  class="fixed bottom-0 left-1/2 z-50 h-16 w-full max-w-lg -translate-x-1/2 rounded-full border-2 border-gray-200 bg-white dark:border-gray-600 dark:bg-gray-700"
>
  <div
    class="mx-auto flex h-full w-full items-center justify-evenly rounded-full"
  >
    {
      activeKeys.map((key) => (
        <a
          href={`#${key}`}
          class="relative flex h-full w-full items-center justify-center"
        >
          <div class="group flex h-full w-full items-center justify-center">
            <Button icon={icons[key]} categorie={key} />
          </div>
        </a>
      ))
    }

    {/* Separador */}
    <div class="h-8 w-2.5 self-center bg-gray-300 dark:bg-gray-700"></div>

    <div class="group flex h-full w-full items-center justify-center">
      <ThemeToggle />
      <KeyboardManager data={data} />
    </div>
  </div>
</nav>

<script client:load type="module">
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a");
    const observerOptions = {
      threshold: 0.3,
    };

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const id = entry.target.getAttribute("id");
          navLinks.forEach((link) => {
            link.classList.remove("active");
            if (link.getAttribute("href") === "#" + id) {
              link.classList.add("active");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions,
    );
    sections.forEach((section) => observer.observe(section));

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
